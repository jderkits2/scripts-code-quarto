---
title: "Homework: Finding Your Way in R and Python"
execute:
  error: true
author: "Jenn Derkits"
output: html_document
---

Instructions: Once you have finished this assignment, render the document (Ctrl/Cmd-Shift-K or the Render button). Commit the qmd file and any other files you have changed to the repository and push your changes.

In Canvas, submit a link to your github repository containing the updated files. 

Note: Submitting your link in Canvas lets me know that you are ready for me to grade your homework. You can commit half-finished or not-working homework to GitHub, and it is good practice to commit frequently (at least at the end of each work session). 

# Modes of Execution

Consider the 6 counting words examples in the [textbook module](https://srvanderplas.github.io/stat-computing-r-python/part-tools/04-scripts-notebooks.html#a-short-history-of-talking-to-computers) (they are in 3 separate 'your turn' sections). Look at the code, and then at the information provided for each example. What is different? What is the same? Write 2-3 sentences describing how script mode, interactive mode, and command-line mode differ in R and Python.

---
Python and R are both scripting languages. The script mode allows for the whole thing of parts to be run..for both R and py. The interactive mode allows for commands in both languages to be run line by line and the user interacts immediately. The command line mode for both uses just the terminal (no R studio for R) and for both languages is better for automation and running with servers like HCC. R files have .R and Python files have .py. They both also have different libraries and programs....

---


# Programming with Variables

In this section, you'll demonstrate that you understand how to solve simple math problems using code. First, you'll want to define variables to represent the variables in the equation. Give the variables values that can be used to determine the value of the variable on the other side of the `=`. Then, write code to solve the equation for the value of the variable. 

## Pythagorean Theorem in R

$$a^2 + b^2 = c^2$$

Use the chunk below to define variables $a$, $b$, and $c$, where you define values (of your choice) for $a$ and $b$. Based on the choice of $a$ and $b$, determine $c$ using the mathematical formula. You may need to find the square root function in R to make this work.

```{r pythagorean-theorem-r}
# Your pythagorean theorem code goes here
# Define functions
pythagorean_theorem <- function(a, b) {
  # Calculate the length of the hypotenuse
  c <- sqrt(a^2 + b^2)
  return(c)
}

# Example usage
a <- 5
b <- 6
hypotenuse <- pythagorean_theorem(a, b)
print(paste("The length of the hypotenuse is:", hypotenuse))


```

## Quadratic Formula in Python

$$x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}$$

Use the chunk below to define variables $a$, $b$, and $c$, and then define $x1$ and $x2$, the possible values for $x$. You may find it helpful to define a few additional variables, such as the value of the discriminant $\sqrt{b^2 - 4ac}$, to make it easier to calculate the results. 

```{python quad-formula-py}
# Your quadratic formula code goes here
import math

# Define the coefficients a, b, and c
a = 1
b = 5
c = 6

# Calculate the numerator discriminant (b^2 - 4ac)
discriminant = b**2 - 4*a*c

# Check if the discriminant is non-negative for real roots
if discriminant >= 0:
    # Calculate the square root of the discriminant
    sqrt_discriminant = math.sqrt(discriminant)
    
    # Calculate the two possible solutions using the quadratic formula
    x1 = (-b + sqrt_discriminant) / (2*a)
    x2 = (-b - sqrt_discriminant) / (2*a)
    
    # Print the results
    print(f"The solutions are x1 = {x1} and x2 = {x2}")
else:
    print("The equation has no real roots.")

```

# Debugging practice

Look at the data frame below, which contains 3 columns: `Name`, `Salary`, and `Hire.Year`. You've read in this data from the [data file online](https://github.com/unl-statistics/stat850/blob/main/homework/02-data.tsv) and ideally, you want to plot `Hire.Year` on the x-axis and `Salary` on the y-axis (code to do this is provided).

Unfortunately, the data isn't reading in properly. Identify the problem, propose a solution, and try to implement your solution using functions on the R reference card.

Some things you may want to consider: - `gsub`, a "find and replace" function. See more details by typing `?gsub` into the R console. - You can access columns in a data frame using `$`: `df$col1` will get you `col1` of the `df` object. - You can access items in a vector using `[]`: `x[1]` will get you the first item in `x`

Note: You should be able to **identify** the problem given what you know about R from this week's reading. You may not be able to implement a solution without some additional research, so if you don't get that far that's ok.

```{r}
# This line reads in a tab-separated data file with a header naming the columns

salary <- read.table("02-data.tsv", sep = "\t", header = T)


# This code plots labels for each individual at location (x, y)
library(ggplot2)


ggplot(salary, aes(x = Hire.Year, y = Salary, label = Name)) + 
  geom_label()

# This displays the salary object
salary
```

------------------------------------------------------------------------

The problem with the data is: there is a $by one of the salaries, no legend with colors and names. Also these should be dots for a scatterplot vs. names for the X.

Here is how I solved the problem: I'm not sure how to get rid of $

```{r cleaning-the-data-r}
# Your implementation code goes here
library(dplyr)
# This line reads in a tab-separated data file with a header naming the columns
salary <- read.table("02-data.tsv", sep = "\t", header = T)

#get rid of $ and comma in the csv file
salary <- salary %>%
  mutate(Salary = as.numeric(gsub("[$,]", "", Salary)))

# This code plots labels for each individual salary with color and legend (x, y)
library(ggplot2)
ggplot(salary, aes(x = Hire.Year, y = Salary, color = factor(Name), label = Name)) + 
  geom_point()

# This displays the salary object
salary
```

```
